package playground

import (
  "fmt"
)

templ titleBar() {
  <div class="playground-title-bar">
    <div class="title-bar-options">
      <ul>
        <li><a class="logo" href="/">fontseca.<span>dev</span></a></li>
      </ul>
    </div>

    <div class="title-bar-window-name">
      <span>fontseca.dev's playground</span>
    </div>

    <div class="title-bar-links">
      <a href="https://github.com/fontseca/playground" target="_blank"><i class="fa-brands fa-github"></i></a>
    </div>
  </div>
}

templ layout(collsrc string) {
  <html lang="en" xmlns:hx-on="http://www.w3.org/1999/xhtml">
  <head>
    <meta charset="UTF-8"/>
    <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"/>
    <meta http-equiv="X-UA-Compatible" content="ie=edge"/>
    <link rel="preconnect" href="https://fonts.googleapis.com"/>
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Raleway:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"/>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Source+Serif+4:ital,opsz,wght@0,8..60,200;0,8..60,300;0,8..60,400;0,8..60,500;0,8..60,600;0,8..60,700;0,8..60,800;0,8..60,900;1,8..60,200;1,8..60,300;1,8..60,400;1,8..60,500;1,8..60,600;1,8..60,700;1,8..60,800;1,8..60,900&display=swap"/>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inconsolata:wght@200..900&display=swap" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer"/>
    <link rel="stylesheet" href="/playground/stylesheet.css"/>
    <link rel="apple-touch-icon" sizes="180x180" href="/public/icons/apple-touch-icon.png"/>
    <link rel="icon" type="image/png" sizes="32x32" href="/public/icons/favicon-32x32.png"/>
    <link rel="icon" type="image/png" sizes="16x16" href="/public/icons/favicon-16x16.png"/>
    <link rel="manifest" href="/public/icons/site.webmanifest"/>
    <script src="https://unpkg.com/@phosphor-icons/web"></script>
    <title>fontseca.dev â€” playground</title>
  </head>
  <body hx-on:keyup="SubmitRequest(event)">
    <div class="playground">
      @titleBar()
      { children... }
    </div>

    <dialog class="import-collection-dialog">
      <header>
        <h2>Import Collection</h2>
      </header>
      <form action="/playground" enctype="multipart/form-data" method="post" target="_parent">
        <label for="coll">Choose your Postman API collection.</label>
        <input type="file"
               id="coll"
               name="coll"
               accept=".json, application/json"/>
        <small id="coll-error-msg" style="color: red; display: none;"></small>
        <button id="btn-coll-upload" type="submit" disabled>Import</button>
        <button class="closer" type="button">Close</button>
      </form>

      <br />
      <small>Only HTTP/1.1 is currently supported.</small>
    </dialog>

  if "" != collsrc {
    {! templ.Raw(collsrc) }
  }

  <script defer src="/playground/engine.js"></script>
  <script defer src="https://unpkg.com/htmx.org@2.0.1" integrity="sha384-QWGpdj554B4ETpJJC9z+ZHJcA/i59TyjxEPXiiUgN2WmTyV5OEZWCD6gQhgkdpB/" crossorigin="anonymous"></script>
  </body>
  </html>
}

templ website(colltree, collsrc, alert string) {
  @layout(collsrc) {
    <main class="playground-content">
      @collectionFiles(colltree)
      <div class="canvas">
        @requestBar()
        <header class="request-name">
          <span class="item">Untitled Request</span>
        </header>
        @workbench()
      </div>
    </main>
    if "" != alert {
      {! templ.Raw(alert) }
    }
  }
}

templ collectionContainer(open bool) {
  if open {
    <div class="playground-collection-container open">
      { children...}
    </div>
  } else {
    <div class="playground-collection-container">
      { children...}
    </div>
  }
}

templ collectionFiles(colltree string) {
  @collectionContainer("" != colltree) {
    <div class="actions">
      <button class="collection-files-import" type="button">Import</button>
      <button class="collection-files-toggle" type="button">Explorer</button>
    </div>
    <div class="content">
      if "" != colltree {
        {! templ.Raw(colltree) }
      } else {
        <div class="no-coll">
          <strong>No collection imported.</strong>
        </div>
      }
    </div>
  }
}

templ requestBar() {
  <div class="request-bar">
    <form id="http-request-form"
          hx-post="playground.request"
          hx-swap="none"
          hx-trigger="submit"
          hx-indicator=".request-indicator">
        <select id="http-request-method-picker" name="request_method">
          <option>GET</option>
          <option>POST</option>
          <option>PUT</option>
          <option>PATCH</option>
          <option>DELETE</option>
        </select>
        <input id="http-request-target"
               type="url"
               name="request_target"
               required
               placeholder="Enter URL"
               autofocus />
      <button id="http-request-send-button" type="submit">Send</button>
    </form>
  </div>
}

templ workbench() {
  <div class="workbench">
    @requestPanel()
    @responsePanel()
  </div>
}

templ tabsPanel() {
  <div class="tabs-panel">
    <ul>
      { children... }
    </ul>
  </div>
}

templ workPanel() {
  <div class="work-panel">
    { children... }
  </div>
}

templ requestPanel() {
  <div class="request-response-panel request-panel">
    @tabsPanel() {
      <li data-tab-request-target="#tab-request-query-parameters" class="active tab">Parameters</li>
      <li data-tab-request-target="#tab-request-headers" class="tab">Headers</li>
      <li data-tab-request-target="#tab-request-body" class="tab">Body</li>
    }

    @workPanel() {
      @workspaceTab(true, "request-query-parameters", "request") {
        <h3>Query Parameters</h3>
        <table>
          <thead>
            <tr>
              <td>Key</td>
              <td>Value</td>
            </tr>
          </thead>
          <tbody id="http-request-query-parameters"></tbody>
        </table>
      }

      @workspaceTab(false, "request-headers", "request") {
        <h3>Request Headers</h3>
        <table>
          <thead>
            <tr>
              <td>Key</td>
              <td>Value</td>
            </tr>
          </thead>
          <tbody id="http-request-headers"></tbody>
        </table>
      }

      @workspaceTab(false, "request-body", "request") {
        <h3>Request Body</h3>
        <textarea id="http-request-body"
                  class="http-request-body-textarea"
                  name="http-request-body"
                  form="http-request-form"
                  spellcheck="false">
        </textarea>
      }
    }

    @requestBoxDecoration("left")
    @requestBoxDecoration("right")
  </div>
}

templ responsePanel() {
  <div class="request-response-panel response-panel">
    @tabsPanel() {
      <li data-tab-response-target="#tab-response-body" class="active tab">Body</li>
      <li data-tab-response-target="#tab-response-headers" class="tab">Headers</li>
      <li data-tab-response-target="#tab-response-cookies" class="tab">Cookies</li>
    }

    @workPanel() {
      @workspaceTab(true, "response-body", "response", true) {
        <div class="response-body">
          <div class="htmx-indicator request-indicator">
            <span class="spinner"></span>
          </div>
          <div class="decoration top-right"></div>
          <div class="decoration bottom-left"></div>
          @centeredLabel("Hit `^Enter` or press `Send` to make request.", "response-body")
          <div id="response-status">
            <p>
              <strong>STATUS: </strong><a target="_blank"></a>
            </p>
          </div>
          <pre>
            <code id="http-response-body"></code>
          </pre>
          <div id="response-stats">
            <p class="time"><strong>TIME: </strong><span></span></p>
            <p class="size"><strong>SIZE: </strong><span></span></p>
          </div>
        </div>
      }

      @workspaceTab(false, "response-headers", "response") {
        <h3 class="disable">Response Headers</h3>
        @centeredLabel("Hit `^Enter` or press `Send` to make request.", "response-headers")
        <table class="disable">
          <thead>
            <tr>
              <td>Key</td>
              <td>Value</td>
            </tr>
          </thead>
          <tbody id="http-response-headers"></tbody>
        </table>
      }

      @workspaceTab(false, "response-cookies", "response") {
        <h3 class="disable">Cookies</h3>
        @centeredLabel("Hit `^Enter` or press `Send` to make request.", "response-cookies")
        <table class="disable">
          <thead>
            <tr>
              <td>Name</td>
              <td>Value</td>
              <td>Domain</td>
              <td>Path</td>
              <td>Expires</td>
              <td>HttpOnly</td>
              <td>Secure</td>
            </tr>
          </thead>
          <tbody id="http-response-cookies"></tbody>
        </table>
      }
    }
  </div>
}

/* Utility components.  */

templ tabContent(inheritOverflow bool) {
  if inheritOverflow {
    <div class="workspace-tab-content" style="overflow: inherit;">
      { children... }
    </div>
  } else {
    <div class="workspace-tab-content">
      { children... }
    </div>
  }
}

templ tabByType(typ, id string, active bool) {
    if typ == "request" {
      <div class={ "work-panel-tab", templ.KV("active", active) } id={ fmt.Sprint("tab-", id) } data-tab-request-content>
        { children... }
      </div>
    } else if "response" == typ {
      <div class={ "work-panel-tab", templ.KV("active", active) } id={ fmt.Sprint("tab-", id) } data-tab-response-content>
        { children... }
      </div>
    }
}

templ workspaceTab(active bool, id, tabType string, inheritOverflow ...bool) {
  @tabByType(tabType, id, active) {
    if len(inheritOverflow) == 0 {
      @tabContent(false) {
        { children... }
      }
    } else {
      @tabContent(inheritOverflow[0]) {
        { children... }
      }
    }
  }
}

/* Generic components.  */

templ requestBoxDecoration(placement string) {
  <div class={ "box-decoration", placement }>
    <div class="dot top-left"></div>
    <div class="dot top-right"></div>
    <div class="center"></div>
    <div class="dot bottom-left"></div>
    <div class="dot bottom-right"></div>
  </div>
}

templ centeredLabel(message, id string) {
  <div id={ fmt.Sprint("centered-label-", id) } class="centered-label">
    <p>{ message }</p>
  </div>
}
